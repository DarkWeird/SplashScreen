buildscript {
    dependencies {
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.0.0"
    }
}

plugins {
    id "com.jfrog.artifactory" version "3.1.1"
    id "java-library"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'com.github.spotbugs'
//apply plugin: 'maven-publish'

group = 'org.terasology'

archivesBaseName = 'splash-screen' // for local jar files

sourceCompatibility = 1.8
targetCompatibility = 1.8

// We use both Maven Central and our own Artifactory instance, which contains module builds, extra libs, and so on
repositories {
    mavenCentral()
    maven {
        url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
    }
}

configurations {
    codeMetrics
}

dependencies {

    codeMetrics(group: 'org.terasology.config', name: 'codemetrics', version: '1.3.2', ext: 'zip')

    testCompile group: 'junit', name: 'junit', version: '4.12'

//    testRuntime group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.3'
}

task sourceJar(type: Jar) {
    description = "Create a JAR with all sources"
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    description = "Create a JAR with the JavaDoc for the java sources"
    from javadoc.destinationDir
    classifier = 'javadoc'
}

// Define the artifacts we want to publish (the .pom will also be included since the Maven plugin is active)
artifacts {
    archives sourceJar
    archives javadocJar
}

javadoc {
    failOnError = false
}

checkstyle {
    ignoreFailures = true
    config = resources.text.fromArchiveEntry(configurations.codeMetrics, "checkstyle/checkstyle.xml")
    // this assigns the property variable ${samedir} in checkstyle.xml
    configProperties.samedir = config.asFile().parent
}

configure([checkstyleMain, checkstyleTest]) { 
    doFirst {
        def suppressions = resources.text.fromArchiveEntry(configurations.codeMetrics, "checkstyle/suppressions.xml")
        // the asFile() method extracts the file from the zip archive and puts it next to checkstyle.xml
        // this procedure should not be done in the config phase, since the clean task would erase the file before it can be used
        suppressions.asFile()
    }
}

pmd {
    ignoreFailures = true
    ruleSetConfig = resources.text.fromArchiveEntry(configurations.codeMetrics, "pmd/pmd.xml")
    ruleSets = []
}

spotbugs {
    ignoreFailures = true
    effort = 'max'
    reportLevel = 'medium'
    toolVersion = '4.0.0'
    excludeFilter = new File(rootDir, "config/metrics/findbugs/findbugs-exclude.xml")
}

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            
//            from components.java
//
//            artifactId 'splash-screen'   // for published jar files
//			
//            artifact sourceJar {
//                classifier "sources"
//            }
//            artifact javadocJar {
//                classifier "javadoc"
//            }
//        }
//    }
//}

//artifactory {
//    publish {
//        defaults {
//            publications('mavenJava')
//        }
//    }
//}

